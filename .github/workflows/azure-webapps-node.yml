# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: your-app-name    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '20.x'                # set this to the node version to use

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install, build, and test
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
            - nazwa: Konfiguracja środowiska Go
  używa: actions/setup-go@v5.4.0
  z:
    # Wersja Go do pobrania (jeśli to konieczne) i użycia. Obsługuje specyfikację i zakresy semver. Upewnij się, że ta opcja jest ujęta w pojedyncze cudzysłowy.
    go-version: # opcjonalnie
    # Ścieżka do pliku go.mod lub go.work.
    go-version-file: # opcjonalnie
    # Ustaw tę opcję na true, jeśli chcesz, aby akcja zawsze sprawdzała, czy dostępna jest najnowsza wersja spełniająca specyfikację wersji
    sprawdź-najnowsze: #opcjonalne
    # Służy do pobierania dystrybucji Go z wersji go. Ponieważ istnieje wartość domyślna, użytkownik zazwyczaj jej nie dostarcza. Podczas uruchamiania tej akcji na github.com, wartość domyślna jest wystarczająca. Podczas uruchamiania na GHES, możesz przekazać osobisty token dostępu dla github.com, jeśli występuje ograniczenie szybkości.
    token: # opcjonalny, domyślnie ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Służy do określania, czy buforowanie jest potrzebne. Ustaw na true, jeśli chcesz włączyć buforowanie.
    cache: # opcjonalnie, domyślnie true
    # Służy do określania ścieżki do pliku zależności - go.sum
    ścieżka-zależności-pamięci-podręcznej: # opcjonalnie
    # Docelowa architektura dla Go do użycia. Przykłady: x86, x64. Domyślnie użyje architektury systemowej.
    architektura: # opcjonalnie

                      - nazwa: Konfiguracja środowiska Go
  używa: actions/setup-go@v5.4.0
  z:
    # Wersja Go do pobrania (jeśli to konieczne) i użycia. Obsługuje specyfikację i zakresy semver. Upewnij się, że ta opcja jest ujęta w pojedyncze cudzysłowy.
    go-version: # opcjonalnie
    # Ścieżka do pliku go.mod lub go.work.
    go-version-file: # opcjonalnie
    # Ustaw tę opcję na true, jeśli chcesz, aby akcja zawsze sprawdzała, czy dostępna jest najnowsza wersja spełniająca specyfikację wersji
    sprawdź-najnowsze: #opcjonalne
    # Służy do pobierania dystrybucji Go z wersji go. Ponieważ istnieje wartość domyślna, użytkownik zazwyczaj jej nie dostarcza. Podczas uruchamiania tej akcji na github.com, wartość domyślna jest wystarczająca. Podczas uruchamiania na GHES, możesz przekazać osobisty token dostępu dla github.com, jeśli występuje ograniczenie szybkości.
    token: # opcjonalny, domyślnie ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Służy do określania, czy buforowanie jest potrzebne. Ustaw na true, jeśli chcesz włączyć buforowanie.
    cache: # opcjonalnie, domyślnie true
    # Służy do określania ścieżki do pliku zależności - go.sum
    ścieżka-zależności-pamięci-podręcznej: # opcjonalnie
    # Docelowa architektura dla Go do użycia. Przykłady: x86, x64. Domyślnie użyje architektury systemowej.
    architektura: # opcjonalnie
          
